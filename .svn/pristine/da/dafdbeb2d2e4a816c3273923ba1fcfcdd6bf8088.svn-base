<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="zh">
<head>
<!-- Generated by javadoc (version 1.7.0_25) on Wed Apr 15 17:32:01 CST 2015 -->
<title>BaseHibernateDao</title>
<meta name="date" content="2015-04-15">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="BaseHibernateDao";
    }
//-->
</script>
<noscript>
<div>您的浏览器已禁用 JavaScript。</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="跳过导航链接"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="导航">
<li><a href="../../../overview-summary.html">概览</a></li>
<li><a href="package-summary.html">程序包</a></li>
<li class="navBarCell1Rev">类</li>
<li><a href="package-tree.html">树</a></li>
<li><a href="../../../deprecated-list.html">已过时</a></li>
<li><a href="../../../index-files/index-1.html">索引</a></li>
<li><a href="../../../help-doc.html">帮助</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>上一个类</li>
<li><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口"><span class="strong">下一个类</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/job5156/dao/BaseHibernateDao.html" target="_top">框架</a></li>
<li><a href="BaseHibernateDao.html" target="_top">无框架</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">所有类</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>概要:&nbsp;</li>
<li>嵌套&nbsp;|&nbsp;</li>
<li><a href="#field_summary">字段</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">方法</a></li>
</ul>
<ul class="subNavList">
<li>详细资料:&nbsp;</li>
<li><a href="#field_detail">字段</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">方法</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">com.job5156.dao</div>
<h2 title="类 BaseHibernateDao" class="title">类 BaseHibernateDao&lt;M extends java.io.Serializable,PK extends java.io.Serializable&gt;</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>com.job5156.dao.BaseHibernateDao&lt;M,PK&gt;</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl><dt><span class="strong">类型参数:</span></dt><dd><code>M</code> - 持久实体类泛型，用来指定此dao负责的实体</dd><dd><code>PK</code> - 主键泛型，用于指定主键的类型</dd></dl>
<dl>
<dt>所有已实现的接口:</dt>
<dd><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;M,PK&gt;</dd>
</dl>
<hr>
<br>
<pre>public abstract class <span class="strong">BaseHibernateDao&lt;M extends java.io.Serializable,PK extends java.io.Serializable&gt;</span>
extends java.lang.Object
implements <a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;M,PK&gt;</pre>
<div class="block">数据处理类的基础父类，包含基本的增删改方法，所有dao的实现类都要继承此类</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>字段概要</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="字段概要表, 列表字段和解释">
<caption><span>字段</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">限定符和类型</th>
<th class="colLast" scope="col">字段和说明</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected java.util.Map&lt;java.lang.String,MatchType&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#allowPropertyMap">allowPropertyMap</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected static Logger</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#LOGGER">LOGGER</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected org.hibernate.Session</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#session">session</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.SessionFactory</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#sessionFactory">sessionFactory</a></strong></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>构造器概要</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="构造器概要表, 列表构造器和解释">
<caption><span>构造器</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">构造器和说明</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#BaseHibernateDao()">BaseHibernateDao</a></strong>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>方法概要</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="方法概要表, 列表方法和解释">
<caption><span>方法</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">限定符和类型</th>
<th class="colLast" scope="col">方法和说明</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregate(java.lang.String, java.util.Map, java.lang.Object...)">aggregate</a></strong>(java.lang.String&nbsp;hql,
         java.util.Map&lt;java.lang.String,java.util.Collection&lt;?&gt;&gt;&nbsp;map,
         java.lang.Object...&nbsp;paramlist)</code>
<div class="block">for in</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregate(java.lang.String, java.util.Map)">aggregate</a></strong>(java.lang.String&nbsp;hql,
         java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregate(java.lang.String, java.lang.Object...)">aggregate</a></strong>(java.lang.String&nbsp;hql,
         java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregateByCriteria(ConditionQuery)">aggregateByCriteria</a></strong>(ConditionQuery&nbsp;query)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregateByNative(java.lang.String, java.util.List, java.lang.Object...)">aggregateByNative</a></strong>(java.lang.String&nbsp;natvieSQL,
                 java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                 java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregateBySql(java.lang.String, java.util.Map)">aggregateBySql</a></strong>(java.lang.String&nbsp;sql,
              java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#aggregateBySql(java.lang.String, java.lang.Object...)">aggregateBySql</a></strong>(java.lang.String&nbsp;sql,
              java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.Criteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#builderAliasCache(org.hibernate.Criteria, AliasCacheUtils)">builderAliasCache</a></strong>(org.hibernate.Criteria&nbsp;criteria,
                 AliasCacheUtils&nbsp;aliasUtils)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected org.hibernate.Criteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#builderOrder(org.hibernate.Criteria, AliasCacheUtils, OrderCondition...)">builderOrder</a></strong>(org.hibernate.Criteria&nbsp;c,
            AliasCacheUtils&nbsp;aliasUtils,
            OrderCondition...&nbsp;orders)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.Criteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#builderPageOrder(org.hibernate.Criteria, , AliasCacheUtils)">builderPageOrder</a></strong>(org.hibernate.Criteria&nbsp;c,
                <any>&nbsp;page,
                AliasCacheUtils&nbsp;aliasUtils)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected org.hibernate.criterion.Criterion</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#buildFieldFilterCriterion(PropertyFilter, AliasCacheUtils)">buildFieldFilterCriterion</a></strong>(PropertyFilter&nbsp;filter,
                         AliasCacheUtils&nbsp;aliasUtils)</code>
<div class="block">按属性条件参数创建Criterion,辅助函数.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.criterion.Criterion</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#buildFieldFilterCriterion(java.lang.String, java.lang.Object[], java.lang.String, MatchType, AliasCacheUtils)">buildFieldFilterCriterion</a></strong>(java.lang.String&nbsp;fieldName,
                         java.lang.Object[]&nbsp;fieldValues,
                         java.lang.String&nbsp;otherField,
                         MatchType&nbsp;matchType,
                         AliasCacheUtils&nbsp;aliasUtils)</code>
<div class="block">按属性条件参数创建Criterion,辅助函数.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected org.hibernate.criterion.Criterion[]</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#buildFieldFilterCriterions(java.util.List, AliasCacheUtils)">buildFieldFilterCriterions</a></strong>(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
                          AliasCacheUtils&nbsp;aliasUtils)</code>
<div class="block">按属性条件列表创建Criterion数组,辅助函数.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.criterion.Criterion</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#buildMultiFieldFilter(PropertyFilter, AliasCacheUtils)">buildMultiFieldFilter</a></strong>(PropertyFilter&nbsp;filter,
                     AliasCacheUtils&nbsp;aliasUtils)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#clear()">clear</a></strong>()</code>
<div class="block">清除缓存</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#countAll()">countAll</a></strong>()</code>
<div class="block">记录所有记录数</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected int</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#countCriteriaResult(org.hibernate.Criteria)">countCriteriaResult</a></strong>(org.hibernate.Criteria&nbsp;c)</code>
<div class="block">执行count查询获得本次Criteria查询所能获得的对象总数.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected long</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#countHqlResult(java.lang.String, java.util.Map)">countHqlResult</a></strong>(java.lang.String&nbsp;hql,
              java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</code>
<div class="block">执行count查询获得本次Hql查询所能获得的对象总数.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected long</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#countHqlResult(java.lang.String, java.lang.Object...)">countHqlResult</a></strong>(java.lang.String&nbsp;hql,
              java.lang.Object...&nbsp;values)</code>
<div class="block">执行count查询获得本次Hql查询所能获得的对象总数.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.hibernate.Criteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#createCriteria(org.hibernate.criterion.Criterion...)">createCriteria</a></strong>(org.hibernate.criterion.Criterion...&nbsp;criterions)</code>
<div class="block">根据Criterion条件创建Criteria.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>org.hibernate.criterion.DetachedCriteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#createDetachedCriteria(org.hibernate.criterion.Criterion...)">createDetachedCriteria</a></strong>(org.hibernate.criterion.Criterion...&nbsp;criterions)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.hibernate.Query</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#createQuery(java.lang.String, java.util.List)">createQuery</a></strong>(java.lang.String&nbsp;queryString,
           java.util.List&nbsp;values)</code>
<div class="block">根据查询HQL与参数列表创建Query对象.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>org.hibernate.Query</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#createQuery(java.lang.String, java.util.Map)">createQuery</a></strong>(java.lang.String&nbsp;queryString,
           java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</code>
<div class="block">根据查询HQL与参数列表创建Query对象.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.hibernate.Query</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#createQuery(java.lang.String, java.lang.Object...)">createQuery</a></strong>(java.lang.String&nbsp;queryString,
           java.lang.Object...&nbsp;values)</code>
<div class="block">根据查询HQL与参数列表创建Query对象.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#delete(PK)">delete</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</code>
<div class="block">根据id删除记录</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#deleteObject(M)">deleteObject</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</code>
<div class="block">删除记录</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected int</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#execteBulk(java.lang.String, java.lang.Object...)">execteBulk</a></strong>(java.lang.String&nbsp;hql,
          java.lang.Object...&nbsp;paramlist)</code>
<div class="block">执行批处理语句.如 之间insert, update, delete 等.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected int</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#execteNativeBulk(java.lang.String, java.lang.Object...)">execteNativeBulk</a></strong>(java.lang.String&nbsp;natvieSQL,
                java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#exists(PK)">exists</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</code>
<div class="block">判断记录是否存在</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(AliasCacheUtils, org.hibernate.criterion.Criterion...)">find</a></strong>(AliasCacheUtils&nbsp;aliasUtils,
    org.hibernate.criterion.Criterion...&nbsp;criterions)</code>
<div class="block">按Criteria查询对象列表.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(AliasCacheUtils, OrderCondition[], int, org.hibernate.criterion.Criterion...)">find</a></strong>(AliasCacheUtils&nbsp;aliasUtils,
    OrderCondition[]&nbsp;orders,
    int&nbsp;maxResults,
    org.hibernate.criterion.Criterion...&nbsp;criterions)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(java.util.List)">find</a></strong>(java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</code>
<div class="block">按属性过滤条件列表查找对象列表.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(java.util.List, int, OrderCondition...)">find</a></strong>(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
    int&nbsp;maxResults,
    OrderCondition...&nbsp;orders)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(java.util.List, OrderCondition...)">find</a></strong>(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
    OrderCondition...&nbsp;orders)</code>
<div class="block">按属性过滤条件列表查找对象列表（支持排序）.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;X&gt;&nbsp;java.util.List&lt;X&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(java.lang.String, java.util.Map)">find</a></strong>(java.lang.String&nbsp;hql,
    java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</code>
<div class="block">按HQL查询对象列表.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;X&gt;&nbsp;java.util.List&lt;X&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#find(java.lang.String, java.lang.Object...)">find</a></strong>(java.lang.String&nbsp;hql,
    java.lang.Object...&nbsp;values)</code>
<div class="block">按HQL查询对象列表.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findBy(java.lang.String, java.lang.Object[], MatchType)">findBy</a></strong>(java.lang.String&nbsp;fieldName,
      java.lang.Object[]&nbsp;value,
      MatchType&nbsp;matchType)</code>
<div class="block">按属性查找对象列表,支持多种匹配方式.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findBy(java.lang.String, java.lang.Object[], MatchType, int, OrderCondition...)">findBy</a></strong>(java.lang.String&nbsp;fieldName,
      java.lang.Object[]&nbsp;value,
      MatchType&nbsp;matchType,
      int&nbsp;maxResults,
      OrderCondition...&nbsp;orders)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findBy(java.lang.String, java.lang.Object[], MatchType, OrderCondition...)">findBy</a></strong>(java.lang.String&nbsp;fieldName,
      java.lang.Object[]&nbsp;value,
      MatchType&nbsp;matchType,
      OrderCondition...&nbsp;orders)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.Integer</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findByCountAll(AliasCacheUtils, org.hibernate.criterion.Criterion...)">findByCountAll</a></strong>(AliasCacheUtils&nbsp;aliasUtils,
              org.hibernate.criterion.Criterion...&nbsp;criterions)</code>
<div class="block">按Criteria查询记录总数</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.Integer</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findByCountAll(java.util.List)">findByCountAll</a></strong>(java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</code>
<div class="block">按属性过滤条件统计数量.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPage(, AliasCacheUtils, org.hibernate.criterion.Criterion...)">findPage</a></strong>(<any>&nbsp;page,
        AliasCacheUtils&nbsp;aliasUtils,
        org.hibernate.criterion.Criterion...&nbsp;criterions)</code>
<div class="block">按Criteria分页查询.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPage(, java.util.List)">findPage</a></strong>(<any>&nbsp;page,
        java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</code>
<div class="block">按属性过滤条件列表分页查找对象.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPage(, java.lang.String, java.util.Map)">findPage</a></strong>(<any>&nbsp;page,
        java.lang.String&nbsp;hql,
        java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</code>
<div class="block">按HQL分页查询.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPage(, java.lang.String, java.lang.Object...)">findPage</a></strong>(<any>&nbsp;page,
        java.lang.String&nbsp;hql,
        java.lang.Object...&nbsp;values)</code>
<div class="block">按HQL分页查询.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;<any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPage(ConditionQuery, OrderBy, int, int)">findPage</a></strong>(ConditionQuery&nbsp;query,
        OrderBy&nbsp;orderBy,
        int&nbsp;pn,
        int&nbsp;pageSize)</code>
<div class="block">通过 Criteria 对象查询并直接返回分页对象page</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;<any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPageByNative(java.lang.String, PageV3, java.util.List, java.util.List, java.util.Map)">findPageByNative</a></strong>(java.lang.String&nbsp;nativeSQL,
                PageV3&nbsp;page,
                java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
                java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>
<div class="block">通过包含:name的原生SQL查询并返回PAGE</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;<any></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findPageByNative(java.lang.String, PageV3, java.util.List, java.util.List, java.lang.Object...)">findPageByNative</a></strong>(java.lang.String&nbsp;nativeSQL,
                PageV3&nbsp;page,
                java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
                java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;X&gt;&nbsp;X</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findUnique(java.lang.String, java.util.Map)">findUnique</a></strong>(java.lang.String&nbsp;hql,
          java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</code>
<div class="block">按HQL查询唯一对象.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;X&gt;&nbsp;X</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#findUnique(java.lang.String, java.lang.Object...)">findUnique</a></strong>(java.lang.String&nbsp;hql,
          java.lang.Object...&nbsp;values)</code>
<div class="block">按HQL查询唯一对象.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#flush()">flush</a></strong>()</code>
<div class="block">刷新记录</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#get(PK)">get</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</code>
<div class="block">根据id获取记录</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#get(PK[])">get</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>[]&nbsp;ids)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected long</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#getIdResult(java.lang.String, java.lang.Object...)">getIdResult</a></strong>(java.lang.String&nbsp;hql,
           java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>org.hibernate.Session</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#getSession()">getSession</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(ConditionQuery, OrderBy)">list</a></strong>(ConditionQuery&nbsp;query,
    OrderBy&nbsp;orderBy)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(ConditionQuery, OrderBy, int, int)">list</a></strong>(ConditionQuery&nbsp;query,
    OrderBy&nbsp;orderBy,
    int&nbsp;pn,
    int&nbsp;pageSize)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(org.hibernate.Criteria)">list</a></strong>(org.hibernate.Criteria&nbsp;criteria)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(org.hibernate.criterion.DetachedCriteria)">list</a></strong>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(java.lang.String)">list</a></strong>(java.lang.String&nbsp;sql)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(java.lang.String, int, int, java.lang.Object[])">list</a></strong>(java.lang.String&nbsp;hql,
    int&nbsp;pn,
    int&nbsp;pageSize,
    java.lang.Object[]&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#list(java.lang.String, java.lang.Object[])">list</a></strong>(java.lang.String&nbsp;sql,
    java.lang.Object[]&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listAll()">listAll</a></strong>()</code>
<div class="block">返回所有记录</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listAll(int, int)">listAll</a></strong>(int&nbsp;pn,
       int&nbsp;pageSize)</code>
<div class="block">分页返回记录</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listByNative(java.lang.String, int, int, java.util.List, java.util.List, java.lang.Object...)">listByNative</a></strong>(java.lang.String&nbsp;nativeSQL,
            int&nbsp;pn,
            int&nbsp;pageSize,
            java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
            java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
            java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listByParaMap(java.lang.String, int, int, java.util.Map)">listByParaMap</a></strong>(java.lang.String&nbsp;hql,
             int&nbsp;pn,
             int&nbsp;pageSize,
             java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>
<div class="block">返回LIST通过NAME传值</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listSelf(java.lang.String, int, int, java.lang.Object...)">listSelf</a></strong>(java.lang.String&nbsp;hql,
        int&nbsp;pn,
        int&nbsp;pageSize,
        java.lang.Object...&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;java.util.List&lt;T&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#listWithIn(java.lang.String, int, int, java.util.Map, java.lang.Object...)">listWithIn</a></strong>(java.lang.String&nbsp;hql,
          int&nbsp;start,
          int&nbsp;length,
          java.util.Map&lt;java.lang.String,java.util.Collection&lt;?&gt;&gt;&nbsp;map,
          java.lang.Object...&nbsp;paramlist)</code>
<div class="block">for in</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#load(PK)">load</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#merge(M)">merge</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</code>
<div class="block">合并记录</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#next(PK, int, int)">next</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;pk,
    int&nbsp;pn,
    int&nbsp;pageSize)</code>
<div class="block">下一页</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#pre(PK, int, int)">pre</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;pk,
   int&nbsp;pn,
   int&nbsp;pageSize)</code>
<div class="block">上一页</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a></code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#save(M)">save</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</code>
<div class="block">创建记录</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#saveOrUpdate(M)">saveOrUpdate</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</code>
<div class="block">更新记录，如果没有则创建</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setAllowPropertyMap()">setAllowPropertyMap</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected org.hibernate.Criteria</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setPageParameter(org.hibernate.Criteria, )">setPageParameter</a></strong>(org.hibernate.Criteria&nbsp;c,
                <any>&nbsp;page)</code>
<div class="block">设置分页参数到Criteria对象,辅助函数.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected org.hibernate.Query</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setPageParameter(org.hibernate.Query, )">setPageParameter</a></strong>(org.hibernate.Query&nbsp;q,
                <any>&nbsp;page)</code>
<div class="block">设置分页参数到Query对象,辅助函数.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setParameters(org.hibernate.Query, java.util.Map)">setParameters</a></strong>(org.hibernate.Query&nbsp;query,
             java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>
<div class="block">通过name传入参数</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setParameters(org.hibernate.Query, java.lang.Object[])">setParameters</a></strong>(org.hibernate.Query&nbsp;query,
             java.lang.Object[]&nbsp;paramlist)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setSession(org.hibernate.Session)">setSession</a></strong>(org.hibernate.Session&nbsp;session)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>abstract void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#setSessionFactory(org.hibernate.SessionFactory)">setSessionFactory</a></strong>(org.hibernate.SessionFactory&nbsp;sessionFactory)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#unique(org.hibernate.Criteria)">unique</a></strong>(org.hibernate.Criteria&nbsp;criteria)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#unique(org.hibernate.criterion.DetachedCriteria)">unique</a></strong>(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>&lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#unique(java.lang.String, java.util.Map)">unique</a></strong>(java.lang.String&nbsp;hql,
      java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected &lt;T&gt;&nbsp;T</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#unique(java.lang.String, java.lang.Object...)">unique</a></strong>(java.lang.String&nbsp;hql,
      java.lang.Object...&nbsp;paramlist)</code>
<div class="block">根据查询条件返回唯一一条记录</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../com/job5156/dao/BaseHibernateDao.html#update(M)">update</a></strong>(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</code>
<div class="block">更新记录</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>从类继承的方法&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>字段详细资料</h3>
<a name="LOGGER">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>LOGGER</h4>
<pre>protected static final&nbsp;Logger LOGGER</pre>
</li>
</ul>
<a name="allowPropertyMap">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>allowPropertyMap</h4>
<pre>protected&nbsp;java.util.Map&lt;java.lang.String,MatchType&gt; allowPropertyMap</pre>
</li>
</ul>
<a name="sessionFactory">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sessionFactory</h4>
<pre>protected&nbsp;org.hibernate.SessionFactory sessionFactory</pre>
</li>
</ul>
<a name="session">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>session</h4>
<pre>protected&nbsp;org.hibernate.Session session</pre>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>构造器详细资料</h3>
<a name="BaseHibernateDao()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BaseHibernateDao</h4>
<pre>public&nbsp;BaseHibernateDao()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>方法详细资料</h3>
<a name="setSessionFactory(org.hibernate.SessionFactory)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSessionFactory</h4>
<pre>public abstract&nbsp;void&nbsp;setSessionFactory(org.hibernate.SessionFactory&nbsp;sessionFactory)</pre>
</li>
</ul>
<a name="setSession(org.hibernate.Session)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSession</h4>
<pre>public&nbsp;void&nbsp;setSession(org.hibernate.Session&nbsp;session)</pre>
</li>
</ul>
<a name="getSession()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSession</h4>
<pre>public&nbsp;org.hibernate.Session&nbsp;getSession()</pre>
</li>
</ul>
<a name="setAllowPropertyMap()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setAllowPropertyMap</h4>
<pre>public&nbsp;void&nbsp;setAllowPropertyMap()</pre>
<dl><dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="save(java.io.Serializable)">
<!--   -->
</a><a name="save(M)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>save</h4>
<pre>public&nbsp;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;save(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#save(M)">IBaseDao</a></code></strong></div>
<div class="block">创建记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#save(M)">save</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="saveOrUpdate(java.io.Serializable)">
<!--   -->
</a><a name="saveOrUpdate(M)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>saveOrUpdate</h4>
<pre>public&nbsp;void&nbsp;saveOrUpdate(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#saveOrUpdate(M)">IBaseDao</a></code></strong></div>
<div class="block">更新记录，如果没有则创建</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#saveOrUpdate(M)">saveOrUpdate</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="update(java.io.Serializable)">
<!--   -->
</a><a name="update(M)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>update</h4>
<pre>public&nbsp;void&nbsp;update(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#update(M)">IBaseDao</a></code></strong></div>
<div class="block">更新记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#update(M)">update</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="merge(java.io.Serializable)">
<!--   -->
</a><a name="merge(M)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>merge</h4>
<pre>public&nbsp;void&nbsp;merge(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#merge(M)">IBaseDao</a></code></strong></div>
<div class="block">合并记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#merge(M)">merge</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="delete(java.io.Serializable)">
<!--   -->
</a><a name="delete(PK)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>delete</h4>
<pre>public&nbsp;void&nbsp;delete(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#delete(PK)">IBaseDao</a></code></strong></div>
<div class="block">根据id删除记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#delete(PK)">delete</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="deleteObject(java.io.Serializable)">
<!--   -->
</a><a name="deleteObject(M)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deleteObject</h4>
<pre>public&nbsp;void&nbsp;deleteObject(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;model)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#deleteObject(M)">IBaseDao</a></code></strong></div>
<div class="block">删除记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#deleteObject(M)">deleteObject</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="exists(java.io.Serializable)">
<!--   -->
</a><a name="exists(PK)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>exists</h4>
<pre>public&nbsp;boolean&nbsp;exists(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#exists(PK)">IBaseDao</a></code></strong></div>
<div class="block">判断记录是否存在</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#exists(PK)">exists</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="get(java.io.Serializable)">
<!--   -->
</a><a name="get(PK)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;get(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#get(PK)">IBaseDao</a></code></strong></div>
<div class="block">根据id获取记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#get(PK)">get</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="load(java.io.Serializable)">
<!--   -->
</a><a name="load(PK)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>load</h4>
<pre>public&nbsp;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&nbsp;load(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;id)</pre>
</li>
</ul>
<a name="get(java.io.Serializable[])">
<!--   -->
</a><a name="get(PK[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;get(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>[]&nbsp;ids)</pre>
</li>
</ul>
<a name="countAll()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>countAll</h4>
<pre>public&nbsp;int&nbsp;countAll()</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#countAll()">IBaseDao</a></code></strong></div>
<div class="block">记录所有记录数</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#countAll()">countAll</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="listAll()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listAll</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;listAll()</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#listAll()">IBaseDao</a></code></strong></div>
<div class="block">返回所有记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#listAll()">listAll</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="listAll(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listAll</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;listAll(int&nbsp;pn,
                        int&nbsp;pageSize)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#listAll(int, int)">IBaseDao</a></code></strong></div>
<div class="block">分页返回记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#listAll(int, int)">listAll</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dt><span class="strong">参数:</span></dt><dd><code>pn</code> - 页数</dd><dd><code>pageSize</code> - 每页显示多少条</dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="pre(java.io.Serializable,int,int)">
<!--   -->
</a><a name="pre(PK, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pre</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;pre(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;pk,
                    int&nbsp;pn,
                    int&nbsp;pageSize)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#pre(PK, int, int)">IBaseDao</a></code></strong></div>
<div class="block">上一页</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#pre(PK, int, int)">pre</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dd><code>pn</code> - 页数</dd><dd><code>pageSize</code> - 每页显示多少条</dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="next(java.io.Serializable,int,int)">
<!--   -->
</a><a name="next(PK, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>next</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;next(<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a>&nbsp;pk,
                     int&nbsp;pn,
                     int&nbsp;pageSize)</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#next(PK, int, int)">IBaseDao</a></code></strong></div>
<div class="block">下一页</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#next(PK, int, int)">next</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
<dd><code>pn</code> - 页数</dd><dd><code>pageSize</code> - 每页显示多少条</dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="flush()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flush</h4>
<pre>public&nbsp;void&nbsp;flush()</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#flush()">IBaseDao</a></code></strong></div>
<div class="block">刷新记录</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#flush()">flush</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="clear()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clear</h4>
<pre>public&nbsp;void&nbsp;clear()</pre>
<div class="block"><strong>从接口复制的说明:&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html#clear()">IBaseDao</a></code></strong></div>
<div class="block">清除缓存</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../com/job5156/dao/IBaseDao.html#clear()">clear</a></code>&nbsp;在接口中&nbsp;<code><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口">IBaseDao</a>&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a> extends java.io.Serializable,<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">PK</a> extends java.io.Serializable&gt;</code></dd>
</dl>
</li>
</ul>
<a name="getIdResult(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getIdResult</h4>
<pre>protected&nbsp;long&nbsp;getIdResult(java.lang.String&nbsp;hql,
               java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="listSelf(java.lang.String, int, int, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listSelf</h4>
<pre>protected&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;listSelf(java.lang.String&nbsp;hql,
                         int&nbsp;pn,
                         int&nbsp;pageSize,
                         java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="listWithIn(java.lang.String, int, int, java.util.Map, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listWithIn</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;listWithIn(java.lang.String&nbsp;hql,
                               int&nbsp;start,
                               int&nbsp;length,
                               java.util.Map&lt;java.lang.String,java.util.Collection&lt;?&gt;&gt;&nbsp;map,
                               java.lang.Object...&nbsp;paramlist)</pre>
<div class="block">for in</div>
</li>
</ul>
<a name="list(java.lang.String, int, int, java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(java.lang.String&nbsp;hql,
                         int&nbsp;pn,
                         int&nbsp;pageSize,
                         java.lang.Object[]&nbsp;paramlist)</pre>
</li>
</ul>
<a name="listByParaMap(java.lang.String, int, int, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listByParaMap</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;listByParaMap(java.lang.String&nbsp;hql,
                                  int&nbsp;pn,
                                  int&nbsp;pageSize,
                                  java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
<div class="block">返回LIST通过NAME传值</div>
<dl><dt><span class="strong">类型参数:</span></dt><dd><code>T</code> - </dd><dt><span class="strong">参数:</span></dt><dd><code>hql</code> - </dd><dd><code>pn</code> - </dd><dd><code>pageSize</code> - </dd><dd><code>paraMap</code> - </dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="unique(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unique</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;T&nbsp;unique(java.lang.String&nbsp;hql,
           java.lang.Object...&nbsp;paramlist)</pre>
<div class="block">根据查询条件返回唯一一条记录</div>
</li>
</ul>
<a name="unique(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unique</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;unique(java.lang.String&nbsp;hql,
           java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
</li>
</ul>
<a name="aggregate(java.lang.String, java.util.Map, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregate</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregate(java.lang.String&nbsp;hql,
              java.util.Map&lt;java.lang.String,java.util.Collection&lt;?&gt;&gt;&nbsp;map,
              java.lang.Object...&nbsp;paramlist)</pre>
<div class="block">for in</div>
</li>
</ul>
<a name="aggregate(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregate</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregate(java.lang.String&nbsp;hql,
              java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="aggregate(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregate</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregate(java.lang.String&nbsp;hql,
              java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
</li>
</ul>
<a name="execteBulk(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execteBulk</h4>
<pre>protected&nbsp;int&nbsp;execteBulk(java.lang.String&nbsp;hql,
             java.lang.Object...&nbsp;paramlist)</pre>
<div class="block">执行批处理语句.如 之间insert, update, delete 等.</div>
</li>
</ul>
<a name="execteNativeBulk(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>execteNativeBulk</h4>
<pre>protected&nbsp;int&nbsp;execteNativeBulk(java.lang.String&nbsp;natvieSQL,
                   java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="list(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(java.lang.String&nbsp;sql)</pre>
</li>
</ul>
<a name="list(java.lang.String, java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>protected&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(java.lang.String&nbsp;sql,
                         java.lang.Object[]&nbsp;paramlist)</pre>
</li>
</ul>
<a name="aggregateBySql(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregateBySql</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregateBySql(java.lang.String&nbsp;sql,
                   java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="aggregateBySql(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregateBySql</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregateBySql(java.lang.String&nbsp;sql,
                   java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
</li>
</ul>
<a name="findPageByNative(java.lang.String, PageV3, java.util.List, java.util.List, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPageByNative</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;<any>&nbsp;findPageByNative(java.lang.String&nbsp;nativeSQL,
                         PageV3&nbsp;page,
                         java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
                         java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                         java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="findPageByNative(java.lang.String, PageV3, java.util.List, java.util.List, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPageByNative</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;<any>&nbsp;findPageByNative(java.lang.String&nbsp;nativeSQL,
                         PageV3&nbsp;page,
                         java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
                         java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                         java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
<div class="block">通过包含:name的原生SQL查询并返回PAGE</div>
<dl><dt><span class="strong">类型参数:</span></dt><dd><code>T</code> - </dd><dt><span class="strong">参数:</span></dt><dd><code>nativeSQL</code> - 原生SQL</dd><dd><code>page</code> - </dd><dd><code>entityList</code> - 实体LIST</dd><dd><code>scalarList</code> - 标量LIST（指定返回具体的字段）</dd><dd><code>paraMap</code> - 按name传值的map</dd>
<dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="listByNative(java.lang.String, int, int, java.util.List, java.util.List, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listByNative</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;listByNative(java.lang.String&nbsp;nativeSQL,
                                 int&nbsp;pn,
                                 int&nbsp;pageSize,
                                 java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt;&gt;&nbsp;entityList,
                                 java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                                 java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="aggregateByNative(java.lang.String, java.util.List, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregateByNative</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregateByNative(java.lang.String&nbsp;natvieSQL,
                      java.util.List&lt;java.util.Map.Entry&lt;java.lang.String,org.hibernate.type.Type&gt;&gt;&nbsp;scalarList,
                      java.lang.Object...&nbsp;paramlist)</pre>
</li>
</ul>
<a name="aggregateByCriteria(ConditionQuery)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>aggregateByCriteria</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;aggregateByCriteria(ConditionQuery&nbsp;query)</pre>
</li>
</ul>
<a name="list(ConditionQuery, OrderBy, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(ConditionQuery&nbsp;query,
                         OrderBy&nbsp;orderBy,
                         int&nbsp;pn,
                         int&nbsp;pageSize)</pre>
</li>
</ul>
<a name="list(ConditionQuery, OrderBy)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(ConditionQuery&nbsp;query,
                         OrderBy&nbsp;orderBy)</pre>
</li>
</ul>
<a name="findPage(ConditionQuery, OrderBy, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPage</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;<any>&nbsp;findPage(ConditionQuery&nbsp;query,
                 OrderBy&nbsp;orderBy,
                 int&nbsp;pn,
                 int&nbsp;pageSize)</pre>
<div class="block">通过 Criteria 对象查询并直接返回分页对象page</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>query</code> - </dd><dd><code>orderBy</code> - </dd><dd><code>pn</code> - </dd><dd><code>pageSize</code> - </dd>
<dt><span class="strong">返回:</span></dt><dd>Page</dd></dl>
</li>
</ul>
<a name="list(org.hibernate.Criteria)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(org.hibernate.Criteria&nbsp;criteria)</pre>
</li>
</ul>
<a name="unique(org.hibernate.Criteria)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unique</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;unique(org.hibernate.Criteria&nbsp;criteria)</pre>
</li>
</ul>
<a name="list(org.hibernate.criterion.DetachedCriteria)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>list</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;java.util.List&lt;T&gt;&nbsp;list(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)</pre>
</li>
</ul>
<a name="unique(org.hibernate.criterion.DetachedCriteria)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unique</h4>
<pre>public&nbsp;&lt;T&gt;&nbsp;T&nbsp;unique(org.hibernate.criterion.DetachedCriteria&nbsp;criteria)</pre>
</li>
</ul>
<a name="setParameters(org.hibernate.Query, java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setParameters</h4>
<pre>protected&nbsp;void&nbsp;setParameters(org.hibernate.Query&nbsp;query,
                 java.lang.Object[]&nbsp;paramlist)</pre>
</li>
</ul>
<a name="setParameters(org.hibernate.Query, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setParameters</h4>
<pre>protected&nbsp;void&nbsp;setParameters(org.hibernate.Query&nbsp;query,
                 java.util.Map&lt;java.lang.String,java.lang.Object&gt;&nbsp;paraMap)</pre>
<div class="block">通过name传入参数</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>query</code> - </dd><dd><code>paraMap</code> - </dd></dl>
</li>
</ul>
<a name="find(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;&lt;X&gt;&nbsp;java.util.List&lt;X&gt;&nbsp;find(java.lang.String&nbsp;hql,
                         java.lang.Object...&nbsp;values)</pre>
<div class="block">按HQL查询对象列表.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 数量可变的参数,按顺序绑定.</dd></dl>
</li>
</ul>
<a name="find(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;&lt;X&gt;&nbsp;java.util.List&lt;X&gt;&nbsp;find(java.lang.String&nbsp;hql,
                         java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</pre>
<div class="block">按HQL查询对象列表.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 命名参数,按名称绑定.</dd></dl>
</li>
</ul>
<a name="find(AliasCacheUtils, org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;find(AliasCacheUtils&nbsp;aliasUtils,
                     org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
<div class="block">按Criteria查询对象列表.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>criterions</code> - 数量可变的Criterion.</dd></dl>
</li>
</ul>
<a name="findBy(java.lang.String, java.lang.Object[], MatchType)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findBy</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;findBy(java.lang.String&nbsp;fieldName,
                       java.lang.Object[]&nbsp;value,
                       MatchType&nbsp;matchType)</pre>
<div class="block">按属性查找对象列表,支持多种匹配方式.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>matchType</code> - 匹配方式,目前支持的取值见FieldFilter的MatcheType enum.</dd></dl>
</li>
</ul>
<a name="findBy(java.lang.String, java.lang.Object[], MatchType, OrderCondition...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findBy</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;findBy(java.lang.String&nbsp;fieldName,
                       java.lang.Object[]&nbsp;value,
                       MatchType&nbsp;matchType,
                       OrderCondition...&nbsp;orders)</pre>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - fieldName</dd><dd><code>@param</code> - value</dd><dd><code>@param</code> - order  排序对象</dd><dd><code>@param</code> - matchType</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>List<T>    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="findBy(java.lang.String, java.lang.Object[], MatchType, int, OrderCondition...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findBy</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;findBy(java.lang.String&nbsp;fieldName,
                       java.lang.Object[]&nbsp;value,
                       MatchType&nbsp;matchType,
                       int&nbsp;maxResults,
                       OrderCondition...&nbsp;orders)</pre>
</li>
</ul>
<a name="find(AliasCacheUtils, OrderCondition[], int, org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;find(AliasCacheUtils&nbsp;aliasUtils,
                     OrderCondition[]&nbsp;orders,
                     int&nbsp;maxResults,
                     org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
</li>
</ul>
<a name="find(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;find(java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</pre>
<div class="block">按属性过滤条件列表查找对象列表.</div>
</li>
</ul>
<a name="find(java.util.List, OrderCondition...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;find(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
                     OrderCondition...&nbsp;orders)</pre>
<div class="block">按属性过滤条件列表查找对象列表（支持排序）.</div>
</li>
</ul>
<a name="find(java.util.List, int, OrderCondition...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>find</h4>
<pre>public&nbsp;java.util.List&lt;<a href="../../../com/job5156/dao/BaseHibernateDao.html" title="BaseHibernateDao中的类型参数">M</a>&gt;&nbsp;find(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
                     int&nbsp;maxResults,
                     OrderCondition...&nbsp;orders)</pre>
</li>
</ul>
<a name="findUnique(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findUnique</h4>
<pre>public&nbsp;&lt;X&gt;&nbsp;X&nbsp;findUnique(java.lang.String&nbsp;hql,
               java.lang.Object...&nbsp;values)</pre>
<div class="block">按HQL查询唯一对象.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 数量可变的参数,按顺序绑定.</dd></dl>
</li>
</ul>
<a name="findUnique(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findUnique</h4>
<pre>public&nbsp;&lt;X&gt;&nbsp;X&nbsp;findUnique(java.lang.String&nbsp;hql,
               java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</pre>
<div class="block">按HQL查询唯一对象.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 命名参数,按名称绑定.</dd></dl>
</li>
</ul>
<a name="createCriteria(org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createCriteria</h4>
<pre>public&nbsp;org.hibernate.Criteria&nbsp;createCriteria(org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
<div class="block">根据Criterion条件创建Criteria.
 
 本类封装的find()函数全部默认返回对象类型为T,当不为T时使用本函数.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>criterions</code> - 数量可变的Criterion.</dd></dl>
</li>
</ul>
<a name="createDetachedCriteria(org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createDetachedCriteria</h4>
<pre>public&nbsp;org.hibernate.criterion.DetachedCriteria&nbsp;createDetachedCriteria(org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - criterions</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>DetachedCriteria    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="createQuery(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createQuery</h4>
<pre>public&nbsp;org.hibernate.Query&nbsp;createQuery(java.lang.String&nbsp;queryString,
                              java.lang.Object...&nbsp;values)</pre>
<div class="block">根据查询HQL与参数列表创建Query对象.
 
 本类封装的find()函数全部默认返回对象类型为T,当不为T时使用本函数.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 数量可变的参数,按顺序绑定.</dd></dl>
</li>
</ul>
<a name="createQuery(java.lang.String, java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createQuery</h4>
<pre>public&nbsp;org.hibernate.Query&nbsp;createQuery(java.lang.String&nbsp;queryString,
                              java.util.List&nbsp;values)</pre>
<div class="block">根据查询HQL与参数列表创建Query对象.

 本类封装的find()函数全部默认返回对象类型为T,当不为T时使用本函数.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - List参数,按顺序绑定.</dd></dl>
</li>
</ul>
<a name="createQuery(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createQuery</h4>
<pre>public&nbsp;org.hibernate.Query&nbsp;createQuery(java.lang.String&nbsp;queryString,
                              java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</pre>
<div class="block">根据查询HQL与参数列表创建Query对象.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>values</code> - 命名参数,按名称绑定.</dd></dl>
</li>
</ul>
<a name="findPage(, java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPage</h4>
<pre>public&nbsp;<any>&nbsp;findPage(<any>&nbsp;page,
             java.lang.String&nbsp;hql,
             java.lang.Object...&nbsp;values)</pre>
<div class="block">按HQL分页查询.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>page</code> - 分页参数.不支持其中的orderBy参数.</dd><dd><code>hql</code> - hql语句.</dd><dd><code>values</code> - 数量可变的查询参数,按顺序绑定.</dd>
<dt><span class="strong">返回:</span></dt><dd>分页查询结果, 附带结果列表及所有查询时的参数.</dd></dl>
</li>
</ul>
<a name="findPage(, java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPage</h4>
<pre>public&nbsp;<any>&nbsp;findPage(<any>&nbsp;page,
             java.lang.String&nbsp;hql,
             java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</pre>
<div class="block">按HQL分页查询.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>page</code> - 分页参数.</dd><dd><code>hql</code> - hql语句.</dd><dd><code>values</code> - 命名参数,按名称绑定.</dd>
<dt><span class="strong">返回:</span></dt><dd>分页查询结果, 附带结果列表及所有查询时的参数.</dd></dl>
</li>
</ul>
<a name="findPage(, AliasCacheUtils, org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPage</h4>
<pre>public&nbsp;<any>&nbsp;findPage(<any>&nbsp;page,
             AliasCacheUtils&nbsp;aliasUtils,
             org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
<div class="block">按Criteria分页查询.</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>page</code> - 分页参数.</dd><dd><code>criterions</code> - 数量可变的Criterion.</dd>
<dt><span class="strong">返回:</span></dt><dd>分页查询结果.附带结果列表及所有查询时的参数.</dd></dl>
</li>
</ul>
<a name="findByCountAll(AliasCacheUtils, org.hibernate.criterion.Criterion...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findByCountAll</h4>
<pre>public&nbsp;java.lang.Integer&nbsp;findByCountAll(AliasCacheUtils&nbsp;aliasUtils,
                               org.hibernate.criterion.Criterion...&nbsp;criterions)</pre>
<div class="block">按Criteria查询记录总数</div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - aliasUtils</dd><dd><code>@param</code> - criterions</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>Integer    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="findPage(, java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findPage</h4>
<pre>public&nbsp;<any>&nbsp;findPage(<any>&nbsp;page,
             java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</pre>
<div class="block">按属性过滤条件列表分页查找对象.</div>
</li>
</ul>
<a name="findByCountAll(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findByCountAll</h4>
<pre>public&nbsp;java.lang.Integer&nbsp;findByCountAll(java.util.List&lt;PropertyFilter&gt;&nbsp;filters)</pre>
<div class="block">按属性过滤条件统计数量.</div>
</li>
</ul>
<a name="builderAliasCache(org.hibernate.Criteria, AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>builderAliasCache</h4>
<pre>protected&nbsp;org.hibernate.Criteria&nbsp;builderAliasCache(org.hibernate.Criteria&nbsp;criteria,
                                       AliasCacheUtils&nbsp;aliasUtils)</pre>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - criteria</dd><dd><code>@param</code> - aliasUtils</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>Criteria    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="builderPageOrder(org.hibernate.Criteria, , AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>builderPageOrder</h4>
<pre>protected&nbsp;org.hibernate.Criteria&nbsp;builderPageOrder(org.hibernate.Criteria&nbsp;c,
                                      <any>&nbsp;page,
                                      AliasCacheUtils&nbsp;aliasUtils)</pre>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - c</dd><dd><code>@param</code> - page</dd><dd><code>@param</code> - aliasUtils</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>Criteria    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="builderOrder(org.hibernate.Criteria, AliasCacheUtils, OrderCondition...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>builderOrder</h4>
<pre>protected&nbsp;org.hibernate.Criteria&nbsp;builderOrder(org.hibernate.Criteria&nbsp;c,
                                  AliasCacheUtils&nbsp;aliasUtils,
                                  OrderCondition...&nbsp;orders)</pre>
<dl><dt><span class="strong">参数:</span></dt><dd><code>@param</code> - c</dd><dd><code>@param</code> - aliasUtils</dd><dd><code>@param</code> - orders</dd><dd><code>@return</code> - 设定文件</dd>
<dt><span class="strong">返回:</span></dt><dd>Criteria    返回类型</dd>
<dt><span class="strong">抛出:</span></dt>
<dd><code></code></dd></dl>
</li>
</ul>
<a name="setPageParameter(org.hibernate.Query, )">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setPageParameter</h4>
<pre>protected&nbsp;org.hibernate.Query&nbsp;setPageParameter(org.hibernate.Query&nbsp;q,
                                   <any>&nbsp;page)</pre>
<div class="block">设置分页参数到Query对象,辅助函数.</div>
</li>
</ul>
<a name="setPageParameter(org.hibernate.Criteria, )">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setPageParameter</h4>
<pre>protected&nbsp;org.hibernate.Criteria&nbsp;setPageParameter(org.hibernate.Criteria&nbsp;c,
                                      <any>&nbsp;page)</pre>
<div class="block">设置分页参数到Criteria对象,辅助函数.</div>
</li>
</ul>
<a name="countHqlResult(java.lang.String, java.lang.Object...)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>countHqlResult</h4>
<pre>protected&nbsp;long&nbsp;countHqlResult(java.lang.String&nbsp;hql,
                  java.lang.Object...&nbsp;values)</pre>
<div class="block">执行count查询获得本次Hql查询所能获得的对象总数. 
  
 本函数只能自动处理简单的hql语句,复杂的hql查询请另行编写count语句查询.</div>
</li>
</ul>
<a name="countHqlResult(java.lang.String, java.util.Map)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>countHqlResult</h4>
<pre>protected&nbsp;long&nbsp;countHqlResult(java.lang.String&nbsp;hql,
                  java.util.Map&lt;java.lang.String,?&gt;&nbsp;values)</pre>
<div class="block">执行count查询获得本次Hql查询所能获得的对象总数. 
  
 本函数只能自动处理简单的hql语句,复杂的hql查询请另行编写count语句查询.</div>
</li>
</ul>
<a name="countCriteriaResult(org.hibernate.Criteria)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>countCriteriaResult</h4>
<pre>protected&nbsp;int&nbsp;countCriteriaResult(org.hibernate.Criteria&nbsp;c)</pre>
<div class="block">执行count查询获得本次Criteria查询所能获得的对象总数.</div>
</li>
</ul>
<a name="buildFieldFilterCriterions(java.util.List, AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildFieldFilterCriterions</h4>
<pre>protected&nbsp;org.hibernate.criterion.Criterion[]&nbsp;buildFieldFilterCriterions(java.util.List&lt;PropertyFilter&gt;&nbsp;filters,
                                                             AliasCacheUtils&nbsp;aliasUtils)</pre>
<div class="block">按属性条件列表创建Criterion数组,辅助函数.</div>
</li>
</ul>
<a name="buildMultiFieldFilter(PropertyFilter, AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildMultiFieldFilter</h4>
<pre>protected&nbsp;org.hibernate.criterion.Criterion&nbsp;buildMultiFieldFilter(PropertyFilter&nbsp;filter,
                                                      AliasCacheUtils&nbsp;aliasUtils)</pre>
</li>
</ul>
<a name="buildFieldFilterCriterion(java.lang.String, java.lang.Object[], java.lang.String, MatchType, AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildFieldFilterCriterion</h4>
<pre>protected&nbsp;org.hibernate.criterion.Criterion&nbsp;buildFieldFilterCriterion(java.lang.String&nbsp;fieldName,
                                                          java.lang.Object[]&nbsp;fieldValues,
                                                          java.lang.String&nbsp;otherField,
                                                          MatchType&nbsp;matchType,
                                                          AliasCacheUtils&nbsp;aliasUtils)</pre>
<div class="block">按属性条件参数创建Criterion,辅助函数.</div>
</li>
</ul>
<a name="buildFieldFilterCriterion(PropertyFilter, AliasCacheUtils)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>buildFieldFilterCriterion</h4>
<pre>protected&nbsp;org.hibernate.criterion.Criterion&nbsp;buildFieldFilterCriterion(PropertyFilter&nbsp;filter,
                                                          AliasCacheUtils&nbsp;aliasUtils)</pre>
<div class="block">按属性条件参数创建Criterion,辅助函数.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="跳过导航链接"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="导航">
<li><a href="../../../overview-summary.html">概览</a></li>
<li><a href="package-summary.html">程序包</a></li>
<li class="navBarCell1Rev">类</li>
<li><a href="package-tree.html">树</a></li>
<li><a href="../../../deprecated-list.html">已过时</a></li>
<li><a href="../../../index-files/index-1.html">索引</a></li>
<li><a href="../../../help-doc.html">帮助</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>上一个类</li>
<li><a href="../../../com/job5156/dao/IBaseDao.html" title="com.job5156.dao中的接口"><span class="strong">下一个类</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?com/job5156/dao/BaseHibernateDao.html" target="_top">框架</a></li>
<li><a href="BaseHibernateDao.html" target="_top">无框架</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">所有类</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>概要:&nbsp;</li>
<li>嵌套&nbsp;|&nbsp;</li>
<li><a href="#field_summary">字段</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">方法</a></li>
</ul>
<ul class="subNavList">
<li>详细资料:&nbsp;</li>
<li><a href="#field_detail">字段</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">方法</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
